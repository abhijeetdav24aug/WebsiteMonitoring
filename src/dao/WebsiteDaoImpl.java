package dao;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;

import classes.Website;

/**
 *
 * Implementation of the WebsiteDao methods.
 * @author gabriellerappaport
 *
 */
public class WebsiteDaoImpl implements WebsiteDao {
	/**
	 * SQL query : delete website from database given its unique url
	 */
	private static final String SQL_DELETE_URL = "DELETE FROM Website WHERE url = ?";
	
	/**
	 * SQL query : insert a new website in the database
	 */
	private static final String SQL_INSERT = "INSERT INTO Website (idWebsite, url, checkInterval, date) VALUES (?, ?, ?, NOW())";
	
	/**
	 * SQL query : select maximum idWebsite
	 */
	private static final String SQL_MAX_ID = "SELECT MAX(idWebsite) AS maxIdWebsite FROM Website";
	
	/**
	 * SQL query : select all websites
	 */
	private static final String SQL_SELECT_ALL = "SELECT * FROM Website";
	
	/**
	 * SQL query : select a website given its unique id
	 */
	private static final String SQL_SELECT_ID = "SELECT * FROM Website WHERE idWebsite = ?";
	
	/**
	 * SQL query : select a website given its unique url
	 */
	private static final String SQL_SELECT_URL = "SELECT * FROM Website WHERE url = ?";

	/**
	 * transform a resultset from a SQL query to a Website
	 * 
	 * @param resultSet
	 * @return Website
	 * @throws SQLException
	 */
	private static Website map(ResultSet resultSet) throws SQLException {
		Integer idWebsite = resultSet.getInt("idWebsite");
		String url = resultSet.getString("url");
		Integer checkInterval = resultSet.getInt("checkInterval");
		Date date = resultSet.getDate("date");
		Website website = new Website(idWebsite, url, checkInterval, date);
		return website;
	}

	private DAOFactory daoFactory;

	/**
	 * Constructor
	 * @param daoFactory
	 */
	WebsiteDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	/**
	 * Add a website to the database
	 */
	@Override
	public void create(Website website) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		PreparedStatement preparedStatementIdWebsite = null;
		ResultSet autoGeneratedValues = null;
		ResultSet idWebsiteMax = null;
		Integer idWebsite = 0;
		try {
			/* Recovering a connection from the Factory */
			connection = (Connection) this.daoFactory.getConnection();
			preparedStatementIdWebsite = (PreparedStatement) DAOUtility.initializationPreparedRequest(connection,
					WebsiteDaoImpl.SQL_MAX_ID, false);
			idWebsiteMax = preparedStatementIdWebsite.executeQuery();
			if (idWebsiteMax.next()) {
				idWebsite = (int) (idWebsiteMax.getLong("maxIdWebsite") + 1);
			}
			preparedStatement = (PreparedStatement) DAOUtility.initializationPreparedRequest(connection,
					WebsiteDaoImpl.SQL_INSERT, true, idWebsite, website.getUrl(), website.getCheckInterval());
			int statut = preparedStatement.executeUpdate();
			/* Analyze status returned by insertion request */
			if (statut == 0) {
				throw new DAOException("Failed to create the website, no added row in the table.");
			}

		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtility.silentClosing(autoGeneratedValues, preparedStatement, connection);
		}
	}

	/**
	 * Delete a website from the database
	 */
	@Override
	public void delete(String url) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		try {
			connection = (Connection) this.daoFactory.getConnection();
			preparedStatement = (PreparedStatement) DAOUtility.initializationPreparedRequest(connection,
					WebsiteDaoImpl.SQL_DELETE_URL, true, url);
			int statut = preparedStatement.executeUpdate();
			if (statut == 0) {
				throw new DAOException("Failed to delete the website, no rows deleted from the table.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtility.silentClosing(preparedStatement, connection);
		}
	}

	/**
	 * Return all websites from the database
	 */
	@Override
	public ArrayList<Website> read() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		ArrayList<Website> allWebsites = new ArrayList<>();

		try {
			/* Recovering a connection from the Factory */
			connection = (Connection) this.daoFactory.getConnection();
			preparedStatement = (PreparedStatement) DAOUtility.initializationPreparedRequest(connection,
					WebsiteDaoImpl.SQL_SELECT_ALL, false);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				allWebsites.add(WebsiteDaoImpl.map(resultSet));
			}

		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtility.silentClosing(resultSet, preparedStatement, connection);
		}

		return allWebsites;
	}

	/**
	 * Return website given its unique id
	 */
	@Override
	public Website read(Integer idWebsite) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Website website = null;

		try {
			/* Recovering a connection from the Factory */
			connection = (Connection) this.daoFactory.getConnection();
			preparedStatement = (PreparedStatement) DAOUtility.initializationPreparedRequest(connection,
					WebsiteDaoImpl.SQL_SELECT_ID, false, idWebsite);
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				website = WebsiteDaoImpl.map(resultSet);
			}

		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtility.silentClosing(resultSet, preparedStatement, connection);
		}

		return website;
	}

	/**
	 * Return website given its unique url
	 */
	@Override
	public Website read(String url) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Website website = null;

		try {
			/* Recovering a connection from the Factory */
			connection = (Connection) this.daoFactory.getConnection();
			preparedStatement = (PreparedStatement) DAOUtility.initializationPreparedRequest(connection,
					WebsiteDaoImpl.SQL_SELECT_URL, false, url);
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				website = WebsiteDaoImpl.map(resultSet);
			}

		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtility.silentClosing(resultSet, preparedStatement, connection);
		}

		return website;
	}
}
